#!/bin/sh
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

USER=admin

# Check if file composer.json is exists
if [ ! -f "/var/www/composer.json" ]; then
	APP_SRC_GIT=$(cat .env | grep "APP_SRC_GIT=" | grep -v "#" | tail -1 | cut -d '=' -f2);
	APP_SRC_GIT_BRANCH=$(cat .env | grep "APP_SRC_GIT_BRANCH=" | grep -v "#" | tail -1 | cut -d '=' -f2);


	if [ ! -f "/home/$USER/app_src/composer.json" ] && [ ! "$APP_SRC_GIT" ]; then
		echo "Application source is not found!";
		exit 1;
	fi

	if [ -f "/home/$USER/app_src/composer.json" ] && [ "$APP_SRC_GIT" ]; then
		echo "Application source is inconsitent!";
		exit 1;
	fi

	# Copy from /home/$USER/app_src/composer.json
	if [ -f "/home/$USER/app_src/composer.json" ] && [ ! -d "/tmp/laravel-app" ]; then
		echo "Copy Application from local";
		cp /home/$USER/app_src /tmp/laravel-app;
	fi

	# Clone from git
	if [ "$APP_SRC_GIT" ] && [ ! -d "/tmp/laravel-app" ]; then
		echo -e "Cloning Application from: ${BLUE}$APP_SRC_GIT";

		if [ "$APP_SRC_GIT_BRANCH" ]; then
			echo -e "Branch: ${BLUE}${APP_SRC_GIT_BRANCH}";
			git clone --branch $APP_SRC_GIT_BRANCH $APP_SRC_GIT /tmp/laravel-app;
		else
			git clone $APP_SRC_GIT /tmp/laravel-app;
		fi
	fi

	cp -a /tmp/laravel-app/. /var/www/;
	rm -r /tmp/laravel-app;

	chown -R admin /var/www || true;
	chmod -R 775 /var/www/bootstrap/cache;
	chmod -R 775 /var/www/storage;
	chmod -R 600 /var/www/.env || true;
fi

# clear Windows cariage return 
if [ grep $'\r' /var/www/.env ] ; then
	cat /var/www/.env | tr -d '\r' > /var/www/.env
fi

if [ ! -d "vendor" ]; then
	echo -e "${GREEN}Installing packages from composer";
	composer install --optimize-autoloader --no-dev;
fi


# clear all sysmlinks
find . -type l -delete

# clear all caches first
php artisan cache:clear
rm -r bootstrap/cache/* 
php artisan config:clear


APP_KEY=$(cat .env | grep "APP_KEY=" | grep -v "#" | tail -1 | cut -d '=' -f2)
if [ -z "$APP_KEY" ]; then
	echo -e "${YELLOW}APP_KEY not found: ${GREEN}generating APP_KEY";

	php artisan key:generate;
fi

if [ ! -e "/home/$USER/logs/DB_CHECKED" ]; then
	DB_ROOT_PASSWORD=$(cat .env | grep DB_ROOT_PASSWORD= | grep -v "#" | tail -1 | cut -d '=' -f2);
	DB_USERNAME=$(cat .env | grep DB_USERNAME= | grep -v "#" | tail -1 | cut -d '=' -f2);
	DB_PASSWORD=$(cat .env | grep PASSWORD= | grep -v "#" | tail -1 | cut -d '=' -f2);

	DB_DATABASES=$(cat .env | grep DB_DATABASE | grep -v "#" | cut -d '=' -f2)
	if [ -z "$DB_DATABASES" ]; then
		echo -e "${YELLOW}Database name is empty: ${GREEN}Set to database name to 'forge'";
		DB_DATABASES=forge;
	fi

	php /usr/local/bin/db_checks.php $USER $DB_ROOT_PASSWORD $DB_USERNAME "$DB_DATABASES" || echo -e "${RED}<-- Error on checking database";
fi

SEED_DB=$(cat .env | grep SEED_DB= | grep -v "#" | tail -1 | cut -d '=' -f2);
if [ "$SEED_DB" = "true" ] && [ ! -e "/home/$USER/logs/DB_SEEDED"  ]; then
	php artisan db:seed --force && touch /home/$USER/logs/DB_SEEDED || echo -e "${RED}<-- Error on seeding database(s)";
fi

# (re)create symlink
php artisan storage:link

# (re)cache all for optimized
php artisan config:cache
php artisan route:cache
php artisan view:cache || echo -e "${RED}<-- Error on caching view"


# first arg is `-f` or `--some-option`
if [ "${1#-}" != "$1" ]; then
	set -- php-fpm "$@"
fi

exec "$@"